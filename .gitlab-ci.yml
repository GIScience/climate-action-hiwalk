stages:
  - test
  - test-coverage
  - deploy

unit_tests:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == 'push'
  image:
    name: python:3.11.5
  variables:
    PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      - $PRE_COMMIT_HOME
      - .venv
  before_script:
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.heigit.org".insteadOf "ssh://git@gitlab.heigit.org:2022"
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install poetry==1.7.1
    - poetry config virtualenvs.in-project true
    - poetry install --with test,dev
  script:
    - poetry run pre-commit run --all-files
    - poetry run pytest --ignore test/core/ --cov --cov-report term --cov-report xml:coverage.xml
    - poetry run pytest test/core/
  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml

test_coverage_threshold:
  stage: test-coverage
  dependencies:
    - unit_tests
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == 'push'
  image:
    name: python:3.11.5
  before_script:
    - apt-get update && apt-get install -y bc
  script:
    - coverage="$(grep -oP '<coverage[^>]+line-rate="\K[0-9.]+' "coverage.xml")"
    - if (( $(echo "$coverage < 0.8" | bc -l) )); then
        echo "Code coverage is only $(echo "$coverage*100" | bc)%. We recommend a minimum of 80%." && exit 1;
      else
        exit 0;
      fi
  allow_failure:
    exit_codes:
      - 1

docker_build_deploy_development:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == 'push'
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [ "" ]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${REGISTRY_URL}\":{\"auth\":\"$(printf "%s:%s" "${CI_DOCKER_USER}" "${CI_DOCKER_TOKEN}" | base64 | tr -d '\n')\"}}}}" > /kaniko/.docker/config.json
    - echo "${CI_JOB_TOKEN}" > /kaniko/CI_JOB_TOKEN
  script:
    - >
      /kaniko/executor \
          --context "${CI_PROJECT_DIR}" \
          --dockerfile "${CI_PROJECT_DIR}/Dockerfile.Kaniko" \
          --build-arg "CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}" \
          --cache \
          --cache-repo "${REGISTRY_URL}/${GROUP_NAME}/${CI_PROJECT_NAME}-cache" \
          --cache-copy-layers \
          --destination "${REGISTRY_URL}/${GROUP_NAME}/${CI_PROJECT_NAME}:devel" \
          --destination "${REGISTRY_URL}/${GROUP_NAME}/${CI_PROJECT_NAME}:staging" \
          --cleanup

docker_build_deploy_release:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [ "" ]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${REGISTRY_URL}\":{\"auth\":\"$(printf "%s:%s" "${CI_DOCKER_USER}" "${CI_DOCKER_TOKEN}" | base64 | tr -d '\n')\"}}}}" > /kaniko/.docker/config.json
    - echo "${CI_JOB_TOKEN}" > /kaniko/CI_JOB_TOKEN
  script:
    - >
      /kaniko/executor \
          --context "${CI_PROJECT_DIR}" \
          --dockerfile "${CI_PROJECT_DIR}/Dockerfile.Kaniko" \
          --destination "${REGISTRY_URL}/${GROUP_NAME}/${CI_PROJECT_NAME}:${CI_COMMIT_TAG}" \
          --cleanup